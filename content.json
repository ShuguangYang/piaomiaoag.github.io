{"meta":{"title":"飘渺阿光","subtitle":"阿光的博客","description":"秃头码农","author":"飘渺阿光","url":"http://shuguangyang.github.io","root":"/"},"pages":[{"title":"404","date":"2019-05-11T05:54:31.000Z","updated":"2019-05-11T05:54:31.353Z","comments":true,"path":"404/index.html","permalink":"http://shuguangyang.github.io/404/index.html","excerpt":"","text":""},{"title":"关于我","date":"2019-05-15T13:02:04.000Z","updated":"2019-05-15T13:04:07.627Z","comments":true,"path":"about/index.html","permalink":"http://shuguangyang.github.io/about/index.html","excerpt":"","text":"QQ： 437012461微信： yang437012461学校： 电子科技大学"},{"title":"分类","date":"2019-05-15T12:56:38.000Z","updated":"2019-05-15T13:00:47.236Z","comments":true,"path":"categories/index.html","permalink":"http://shuguangyang.github.io/categories/index.html","excerpt":"","text":""},{"title":"search","date":"2019-05-11T05:54:21.000Z","updated":"2019-05-11T05:54:21.502Z","comments":true,"path":"search/index.html","permalink":"http://shuguangyang.github.io/search/index.html","excerpt":"","text":""},{"title":"标签","date":"2019-05-15T12:58:08.000Z","updated":"2019-05-15T13:00:56.991Z","comments":true,"path":"tags/index.html","permalink":"http://shuguangyang.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Java集合","slug":"Java集合","date":"2019-06-10T07:16:50.000Z","updated":"2019-06-21T08:37:35.205Z","comments":true,"path":"2019/06/10/Java集合/","link":"","permalink":"http://shuguangyang.github.io/2019/06/10/Java集合/","excerpt":"","text":"List、Map、Set三个接口存取元素时，各自特点List以特定索引来存取元素，可以有重复元素。Set不能存放重复元素（用对象的equals()方法来区分元素是否重复）。Map保存键值对（key-value pair）映射，映射关系可以是一对一或多对一。Set和Map容器都有基于哈希存储和排序树的两种实现版本，基于哈希存储的版本理论存取时间复杂度为O(1)，而基于排序树版本的实现在插入或删除元素时会按照元素或元素的键（key）构成排序树从而达到排序和去重的效果。 ArrayList、Vector、LinkedList的存储性能和特性ArrayList 和Vector都是使用数组方式存储数据，此数组元素数大于实际存储的数据以便增加和插入元素，它们都允许直接按序号索引元素，但是插入元素要涉及数组元素移动等内存操作，所以索引数据快而插入数据慢，Vector中的方法由于添加了synchronized修饰，因此Vector是线程安全的容器，但性能上较ArrayList差，因此已经是Java中的遗留容器。LinkedList使用双向链表实现存储（将内存中零散的内存单元通过附加的引用关联起来，形成一个可以按序号索引的线性结构，这种链式存储方式与数组的连续存储方式相比，内存的利用率更高），按序号索引数据需要进行前向或后向遍历，但是插入数据时只需要记录本项的前后项即可，所以插入速度较快。Vector属于遗留容器（Java早期的版本中提供的容器，除此之外，Hashtable、Dictionary、BitSet、Stack、Properties都是遗留容器），已经不推荐使用，但是由于ArrayList和LinkedListed都是非线程安全的，如果遇到多个线程操作同一个容器的场景，则可以通过工具类Collections中的synchronizedList方法将其转换成线程安全的容器后再使用（这是对装潢模式的应用，将已有对象传入另一个类的构造器中创建新的对象来增强实现）。 Collection 和 Collections的区别Collection是集合类的上级接口，主要有Set 和List继承这个接口。Collections是针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。 ArrayList和LinkedList的区别ArrayList和LinkedList都实现了List接口，不同的是ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。 相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。 HashMap和Hashtable的区别HashMap允许键和值是null，而Hashtable不允许键或者值是null。Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。一般认为Hashtable是一个遗留的类。 快速失败(fail-fast)和安全失败(fail-safe)的区别Iterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，而java.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。 Iterator和ListIterator的区别Iterator提供了统一遍历操作集合元素的统一接口, Collection接口实现Iterable接口, 每个集合都通过实现Iterable接口中iterator()方法返回Iterator接口的实例, 然后对集合的元素进行迭代操作。有一点需要注意的是：在迭代元素的时候不能通过集合的方法删除元素, 否则会抛出ConcurrentModificationException 异常。但是可以通过Iterator接口中的remove()方法进行删除。Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。 为什么集合类没有实现Cloneable和Serializable接口？克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。实现Serializable序列化的作用：将对象的状态保存在存储媒体中以便可以在以后重写创建出完全相同的副本；按值将对象从一个应用程序域发向另一个应用程序域。实现 Serializable接口的作用就是可以把对象存到字节流，然后可以恢复。 Java集合类框架的基本接口集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。 Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：Collection：代表一组对象，每一个对象都是它的子元素。Set：不包含重复元素的Collection。List：有顺序的collection，并且可以包含重复元素。Map：可以把键(key)映射到值(value)的对象，键不能重复。 ConcurrentHashMap的原理ConcurrentHashMap 类中包含两个静态内部类 HashEntry 和 Segment。HashEntry 用来封装映射表的键 / 值对；Segment 用来充当锁的角色，每个 Segment 对象守护整个散列映射表的若干个桶。每个桶是由若干个 HashEntry 对象链接起来的链表。一个 ConcurrentHashMap 实例中包含由若干个 Segment 对象组成的数组。HashEntry 用来封装散列映射表中的键值对。在 HashEntry 类中，key，hash 和 next 域都被声明为 final 型，value 域被声明为 volatile 型。 static final class HashEntry&lt;K,V&gt; { final K key; // 声明 key 为 final 型 final int hash; // 声明 hash 值为 final 型 volatile V value; // 声明 value 为 volatile 型 final HashEntry&lt;K,V&gt; next; // 声明 next 为 final 型 HashEntry(K key, int hash, HashEntry&lt;K,V&gt; next, V value) { this.key = key; this.hash = hash; this.next = next; this.value = value; } }在ConcurrentHashMap 中，在散列时如果产生“碰撞”，将采用“分离链接法”来处理“碰撞”：把“碰撞”的 HashEntry 对象链接成一个链表。由于 HashEntry 的 next 域为 final 型，所以新节点只能在链表的表头处插入。 下图是在一个空桶中依次插入 A，B，C 三个 HashEntry 对象后的结构图： Segment 类继承于 ReentrantLock 类，从而使得 Segment 对象能充当锁的角色。每个 Segment 对象用来守护其（成员对象 table 中）包含的若干个桶。 concurrenthashmap有什么优势以及1.7和1.8区别Concurrenthashmap线程安全的，1.7是在jdk1.7中采用Segment + HashEntry的方式进行实现的，lock加在Segment上面。1.7size计算是先采用不加锁的方式，连续计算元素的个数，最多计算3次：1、如果前后两次计算结果相同，则说明计算出来的元素个数是准确的；2、如果前后两次计算结果都不同，则给每个Segment进行加锁，再计算一次元素的个数； 1.8中放弃了Segment臃肿的设计，取而代之的是采用Node + CAS + Synchronized来保证并发安全进行实现，1.8中使用一个volatile类型的变量baseCount记录元素的个数，当插入新数据或则删除数据时，会通过addCount()方法更新baseCount，通过累加baseCount和CounterCell数组中的数量，即可得到元素的总个数； TreeMap的底层实现TreeMap 的实现就是红黑树数据结构，也就说是一棵自平衡的排序二叉树，这样就可以保证当需要快速检索指定节点。 红黑树的插入、删除、遍历时间复杂度都为O(lgN)，所以性能上低于哈希表。但是哈希表无法提供键值对的有序输出，红黑树因为是排序插入的，可以按照键的值的大小有序输出。红黑树性质： 性质1：每个节点要么是红色，要么是黑色。 性质2：根节点永远是黑色的。 性质3：所有的叶节点都是空节点（即 null），并且是黑色的。 性质4：每个红色节点的两个子节点都是黑色。（从每个叶子到根的路径上不会有两个连续的红色节点） 性质5：从任一节点到其子树中每个叶子节点的路径都包含相同数量的黑色节点。 HashMap的容量为什么是2的n次幂负载因子默认是0.75， 2的n次幂是为了让散列更加均匀，例如出现极端情况都散列在数组中的一个下标，那么hashmap会由O（1）复杂退化为O（n）的。 hashMap具体实现Hashmap基于数组实现的，通过对key的hashcode &amp; 数组的长度得到在数组中位置，如当前数组有元素，则数组当前元素next指向要插入的元素，这样来解决hash冲突的，形成了拉链式的结构。put时在多线程情况下，会形成环从而导致死循环。数组长度一般是2^n，从0开始编号，所以hashcode &amp; （2^n-1），（2^n-1）每一位都是1，这样会让散列均匀。需要注意的是，HashMap在JDK1.8的版本中引入了红黑树结构做优化，当链表元素个数大于等于8时，链表转换成树结构；若桶中链表元素个数小于等于6时，树结构还原成链表。因为红黑树的平均查找长度是log(n)，长度为8的时候，平均查找长度为3，如果继续使用链表，平均查找长度为8/2=4，这才有转换为树的必要。链表长度如果是小于等于6，6/2=3，虽然速度也很快的，但是转化为树结构和生成树的时间并不会太短。还有选择6和8，中间有个差值7可以有效防止链表和树频繁转换。假设一下，如果设计成链表个数超过8则链表转换成树结构，链表个数小于8则树结构转换成链表，如果一个HashMap不停的插入、删除元素，链表个数在8左右徘徊，就会频繁的发生树转链表、链表转树，效率会很低。 hashmap是线程不安全的，put时在多线程情况下，会形成环从而导致死循环。CoucurrentHashMap是线程安全的，采用分段锁机制，减少锁的粒度","categories":[],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://shuguangyang.github.io/tags/JAVA/"}]},{"title":"Java面经记录","slug":"Java面经记录","date":"2019-06-09T02:11:20.000Z","updated":"2019-06-20T07:19:03.820Z","comments":true,"path":"2019/06/09/Java面经记录/","link":"","permalink":"http://shuguangyang.github.io/2019/06/09/Java面经记录/","excerpt":"","text":"Java如何进行异常处理java通过面向对象的方法进行异常处理，把各种不同的异常进行分类，并且提供了良好的接口。通过5个关键词：try、catch、throw、throws和finally来实现异常处理。每个异常都是一个对象，它是Throwable类或其他子类的实例。其中try用来执行一段程序，如果出现异常，系统就是抛出一个异常，catch通过异常类型来捕捉它，throw语句用来明确抛出一个异常，throws用来标明一个成员函数可能抛出的各种“异常”，finally是不管发生什么异常都会被执行的一段代码。 Static Nested Class和Inner Class的区别Static Nested Class是被声明为静态（static）的内部类，它可以不依赖外部类实例被实例化。而通常的内部类需要在外部类实例化后才能实例化。Static-Nested Class 的成员，既可以定义为静态的(static)，也可以定义为动态的(instance)。Nested Class的静态成员(Method)只能对Outer Class的静态成员(static memebr)进行操作(ACCESS)，而不能Access Outer Class的动态成员(instance member)。而 Nested Class的动态成员(instance method) 却可以 Access Outer Class的所有成员，这个概念很重要，许多人对这个概念模糊。有一个普通的原则， 因为静态方法(static method) 总是跟 CLASS 相关联(bind CLASS)， 而动态方法( (instance method) 总是跟 instance object 相关联, 所以，静态方法(static method)永远不可以Access跟 object 相关的动态成员(instance member)，反过来就可以，一个CLASS的 instance object 可以 Access 这个 Class 的任何成员，包括静态成员(static member)。 abstract class和interface的区别抽象类（abstract class）就是声明方法的存在而不去实现它的类，用于要创建一个体现某些基本行为的类，并为该类声明方法，但不能在该类中实现该类的情况。不能创建abstract 类的实例。然而可以创建一个变量，其类型是一个抽象类，并让它指向具体子类的一个实例。不能有抽象构造函数或抽象静态方法。Abstract 类的子类为它们父类中的所有抽象方法提供实现。接口（interface）是抽象类的变体。在接口中，所有方法都是抽象的。多继承性可通过实现这样的接口而获得。接口中的所有方法都是抽象的，没有一个有程序体。接口只可以定义static final成员变量。接口的实现与子类相似，除了该实现类不能从接口定义中继承行为。当类实现特殊接口时，它定义（即将程序体给予）所有这种接口的方法。然后，它可以在实现了该接口的类的任何对象上调用接口的方法。由于有抽象类，它允许使用接口名作为引用变量的类型。通常的动态联编将生效。引用可以转换到接口类型或从接口类型转换，instanceof 运算符可以用来决定某对象的类是否实现了接口。 Overload和Override的区别Overload是一个类中定义了多个同名方法，它们有不同的参数个数或者有不同的参数类型，Overload的方法是可以改变返回值的类型。Override是方法的重写，子类中定义某方法与父类中有相同名称和参数。子类的对象使用这个方法时，将调用子类中的定义，对它而言，父类中的定义如同被“屏蔽”了。 JAVA面向对象的特征抽象、继承、封装、多态。 Comparable和Comparator接口区别Java提供了只包含一个compareTo()方法的Comparable接口。这个方法可以个给两个对象排序。具体来说，输入对象小于，等于，大于已经存在的对象则分别返回负数，0，正数。Java提供了包含compare()和equals()两个方法的Comparator接口。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。 类加载机制，双亲委派模型某个特定的类加载器在接到加载类的请求时，首先将加载任务委托给父类加载器，依次递归，如果父类加载器可以完成类加载任务，就成功返回；只有父类加载器无法完成此加载任务时，才自己去加载。使用双亲委派模型的好处在于Java类随着它的类加载器一起具备了一种带有优先级的层次关系。 String为什么不可变不可变对象是指一个对象的状态在对象被创建之后就不再变化。不可改变的意思就是说：不能改变对象内的成员变量，包括基本数据类型的值不能改变，引用类型的变量不能指向其他的对象，引用类型指向的对象的状态也不能改变。String 不可变是因为在 JDK 中 String 类被声明为一个 final 类，且类内部的 value 字节数组也是 final 的，只有当字符串是不可变时字符串池才有可能实现，字符串池的实现可以在运行时节约很多 heap 空间，因为不同的字符串变量都指向池中的同一个字符串；如果字符串是可变的则会引起很严重的安全问题，譬如数据库的用户名密码都是以字符串的形式传入来获得数据库的连接，或者在 socket 编程中主机名和端口都是以字符串的形式传入，因为字符串是不可变的，所以它的值是不可改变的，否则黑客们可以钻到空子改变字符串指向的对象的值造成安全漏洞；因为字符串是不可变的，所以是多线程安全的，同一个字符串实例可以被多个线程共享，这样便不用因为线程安全问题而使用同步，字符串自己便是线程安全的；因为字符串是不可变的所以在它创建的时候 hashcode 就被缓存了，不变性也保证了 hash 码的唯一性，不需要重新计算，这就使得字符串很适合作为 Map 的键，字符串的处理速度要快过其它的键对象，这就是 HashMap 中的键往往都使用字符串的原因。","categories":[],"tags":[{"name":"JAVA","slug":"JAVA","permalink":"http://shuguangyang.github.io/tags/JAVA/"}]},{"title":"利用github搭建自己的博客","slug":"利用github搭建自己的博客","date":"2019-05-15T08:12:45.000Z","updated":"2019-05-15T12:21:11.193Z","comments":true,"path":"2019/05/15/利用github搭建自己的博客/","link":"","permalink":"http://shuguangyang.github.io/2019/05/15/利用github搭建自己的博客/","excerpt":"1.环境配置 安装node.js。 安装GitForWindows，没有的同学在这一部还要注册github。 安装Hexo。打开命令终端，输入npm install -g hexo-cli安装，安装完成后，检查是否成功hexo version。 使用hexo初始化一个项目，选择一个文件夹，用来存放博客项目。之后会弹出一个git命令窗口，输入hexo init 你自己的项目名称（我的是MyBlog），运行结束后会出现自己的项目文件夹，然后输入cd 你自己的项目名称进入到该项目文件目录下，最后输入npm install命令。","text":"1.环境配置 安装node.js。 安装GitForWindows，没有的同学在这一部还要注册github。 安装Hexo。打开命令终端，输入npm install -g hexo-cli安装，安装完成后，检查是否成功hexo version。 使用hexo初始化一个项目，选择一个文件夹，用来存放博客项目。之后会弹出一个git命令窗口，输入hexo init 你自己的项目名称（我的是MyBlog），运行结束后会出现自己的项目文件夹，然后输入cd 你自己的项目名称进入到该项目文件目录下，最后输入npm install命令。 2.创建项目 在上述git窗口继续执行命令hexo g，以后每次更新博客都需要执行此命令。 接下来执行hexo s，打开http://localhost:4000/查看结果。 页面可以访问，并且显示首页，博客项目就已经创建好了。3.部署到github 登陆github账号创建一个新的仓库。 创建格式必须为用户名.github.io。 创建好以后进入设置界面，滑动到仓库设置界面的最底部，找到“GitHub Pages”选项，点击“Choose a theme”。 选择一个主题，应用即可，这里用Chrome浏览器设置，其他浏览器可能还会有问题。 在git窗口执行命令ssh-keygen,一路回车确定，执行完毕后，会在 “ c://Users/用户名/.ssh 文件夹下 ”生成两个文件，分别是： id_rsa 和 id_rsa.pub。 用记事本打开 idrsa.pub 文件，复制里面的所有内容。打开 github，点击设置，进入SSH and GPG keys页面。点击 NEW SSH key 进入SSH key添加界面。其中：title任意填，key填入刚刚我们复制的id_rsa.pub的内容，最后点击 Add SSH key 完成添加。 进入项目文件夹，找到“ _config.yml ” 配置文件，在文件最后找到deploy,修改代码。(注意，冒号后面要加空格) deploy: type: git repo: git@github.com:ShuguangYangshugangyang.github.io.git branch: master 在gitbash命令终端，执行命令hexo d -g,提示输入密码的话，直接回车。 最后访问网址：https://你的GitHub用户名.github.io 就可以看到我们的网址啦！","categories":[{"name":"hexo","slug":"hexo","permalink":"http://shuguangyang.github.io/categories/hexo/"}],"tags":[{"name":"web","slug":"web","permalink":"http://shuguangyang.github.io/tags/web/"}]},{"title":"Java的垃圾回收机制","slug":"Java的垃圾回收机制","date":"2019-04-15T13:18:09.000Z","updated":"2019-05-15T13:54:06.199Z","comments":true,"path":"2019/04/15/Java的垃圾回收机制/","link":"","permalink":"http://shuguangyang.github.io/2019/04/15/Java的垃圾回收机制/","excerpt":"","text":"Java的垃圾回收机制 Java的垃圾回收机制，使得Java程序员在编写程序的时候不再考虑内存管理。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡或者长时间没有使用的对象进行清除和回收。 垃圾回收涉及到两种做法：引用计数法和可达性分析算法。这里还涉及到java的4种引用方式：强引用，软引用，弱引用和虚引用。其中引用强度越来越低，也就意味着引用弱的对象越容易被垃圾回收。JVM的内存模型 Java程序内存的分配是在JVM虚拟机内存分配机制下完成，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范。Java数据区域分为五大数据区域。这些区域各有各的用途，创建及销毁时间。其中方法区和堆是所有线程共享的，栈，本地方法栈和程序虚拟机则为线程私有的。程序计数器是一块很小的内存空间，它是线程私有的，可以认作为当前线程的行号指示器。 Java利用多线程机制使得多个任务能够同时执行处理，所有的线程共享JVM内存区域，而且每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理。分代的垃圾回收策略 新生代（Young Generation）。所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集那些生命周期短的对象。新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区。一个Eden区，两个 Survivor区(一般而言)。大部分对象在Eden区中生成。回收时先将eden区存活对象复制到一个survivor0区，然后清空eden区，当这个survivor0区也存放满了时，则将eden区和survivor0区存活对象复制到另一个survivor1区，然后清空eden和这个survivor0区，此时survivor0区是空的，然后将survivor0区和survivor1区交换，即保持survivor1区为空， 如此往复。NewSize和MaxNewSize分别可以控制新生代的初始大小和最大的大小。 老年代（Old Generation）。在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。内存比新生代也大很多(大概比例是1:2)，当老年代内存满时触发Major GC即Full GC，Full GC发生频率比较低，老年代对象存活时间比较长，存活率标记高。当survivor1区不足以存放 eden和survivor0的存活对象时，就将存活对象直接存放到老年代。若是老年代也满了就会触发一次Full GC，也就是新生代、老年代都进行回收。 持久代（Permanent Generation）。用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。","categories":[{"name":"java","slug":"java","permalink":"http://shuguangyang.github.io/categories/java/"}],"tags":[{"name":"jvm","slug":"jvm","permalink":"http://shuguangyang.github.io/tags/jvm/"}]},{"title":"开启新的篇章","slug":"开启新的篇章","date":"2018-06-29T04:05:21.000Z","updated":"2019-05-15T12:53:41.546Z","comments":true,"path":"2018/06/29/开启新的篇章/","link":"","permalink":"http://shuguangyang.github.io/2018/06/29/开启新的篇章/","excerpt":"","text":"以后要记录所有新学到的知识点开启一段新的学习方法","categories":[{"name":"生活","slug":"生活","permalink":"http://shuguangyang.github.io/categories/生活/"}],"tags":[{"name":"日记","slug":"日记","permalink":"http://shuguangyang.github.io/tags/日记/"},{"name":"记叙","slug":"记叙","permalink":"http://shuguangyang.github.io/tags/记叙/"}]}]}