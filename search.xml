<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>利用github搭建自己的博客</title>
      <link href="/2019/05/15/%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
      <url>/2019/05/15/%E5%88%A9%E7%94%A8github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1.环境配置"></a>1.环境配置</h1><ol><li>安装<a href="http://https://nodejs.org/en/" title="nodejs下载地址" target="_blank" rel="noopener">node.js</a>。</li><li>安装<a href="http://https://gitforwindows.org/" title="git下载地址" target="_blank" rel="noopener">GitForWindows</a>，没有的同学在这一部还要注册<a href="http://https://github.com/" title="github官网" target="_blank" rel="noopener">github</a>。<br><img src="/2019/05/15/利用github搭建自己的博客/1.png" alt></li><li>安装Hexo。打开命令终端，输入<code>npm install -g hexo-cli</code>安装，安装完成后，检查是否成功<code>hexo version</code>。<br><img src="/2019/05/15/利用github搭建自己的博客/2.png" alt></li><li>使用hexo初始化一个项目，选择一个文件夹，用来存放博客项目。<br><img src="/2019/05/15/利用github搭建自己的博客/3.png" alt><br>之后会弹出一个git命令窗口，输入<code>hexo init 你自己的项目名称</code>（我的是MyBlog），运行结束后会出现自己的项目文件夹，然后输入<code>cd 你自己的项目名称</code>进入到该项目文件目录下，最后输入<code>npm install</code>命令。<a id="more"></a><h1 id="2-创建项目"><a href="#2-创建项目" class="headerlink" title="2.创建项目"></a>2.创建项目</h1></li><li>在上述git窗口继续执行命令<code>hexo g</code>，以后每次更新博客都需要执行此命令。<br><img src="/2019/05/15/利用github搭建自己的博客/4.png" alt></li><li>接下来执行<code>hexo s</code>，打开<a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a>查看结果。<br><img src="/2019/05/15/利用github搭建自己的博客/5.png" alt></li><li>页面可以访问，并且显示首页，博客项目就已经创建好了。<br><img src="/2019/05/15/利用github搭建自己的博客/6.png" alt><h1 id="3-部署到github"><a href="#3-部署到github" class="headerlink" title="3.部署到github"></a>3.部署到github</h1></li><li>登陆github账号创建一个新的仓库。<br><img src="/2019/05/15/利用github搭建自己的博客/7.png" alt></li><li>创建格式必须为用户名.github.io。<br><img src="/2019/05/15/利用github搭建自己的博客/8.png" alt></li><li>创建好以后进入设置界面，滑动到仓库设置界面的最底部，找到“GitHub Pages”选项，点击“Choose a theme”。<br><img src="/2019/05/15/利用github搭建自己的博客/9.png" alt></li><li>选择一个主题，应用即可，这里用Chrome浏览器设置，其他浏览器可能还会有问题。</li><li>在git窗口执行命令<code>ssh-keygen</code>,一路回车确定，执行完毕后，会在 “ c://Users/用户名/.ssh 文件夹下 ”生成两个文件，分别是： id_rsa 和 id_rsa.pub。</li><li>用记事本打开 idrsa.pub 文件，复制里面的所有内容。打开 github，点击设置，进入SSH and GPG keys页面。点击 NEW SSH key 进入SSH key添加界面。其中：title任意填，key填入刚刚我们复制的id_rsa.pub的内容，最后点击 Add SSH key 完成添加。<br><img src="/2019/05/15/利用github搭建自己的博客/10.png" alt></li><li>进入项目文件夹，找到“ _config.yml ” 配置文件，在文件最后找到deploy,修改代码。(注意，冒号后面要加空格)<pre class="prettyprint lang-javascript">deploy:type: git  repo: git@github.com:ShuguangYangshugangyang.github.io.git  branch: master</pre>  </li><li>在gitbash命令终端，执行命令<code>hexo d -g</code>,提示输入密码的话，直接回车。</li><li>最后访问网址：https://你的GitHub用户名.github.io 就可以看到我们的网址啦！</li></ol>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java的垃圾回收机制</title>
      <link href="/2019/04/15/Java%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/"/>
      <url>/2019/04/15/Java%E7%9A%84%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E6%9C%BA%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="Java的垃圾回收机制"><a href="#Java的垃圾回收机制" class="headerlink" title="Java的垃圾回收机制"></a>Java的垃圾回收机制</h1><ol><li>Java的垃圾回收机制，使得Java程序员在编写程序的时候不再考虑内存管理。垃圾回收器通常是作为一个单独的低级别的线程运行，不可预知的情况下对内存堆中已经死亡或者长时间没有使用的对象进行清除和回收。</li><li>垃圾回收涉及到两种做法：引用计数法和可达性分析算法。这里还涉及到java的4种引用方式：强引用，软引用，弱引用和虚引用。其中引用强度越来越低，也就意味着引用弱的对象越容易被垃圾回收。<h1 id="JVM的内存模型"><a href="#JVM的内存模型" class="headerlink" title="JVM的内存模型"></a>JVM的内存模型</h1></li><li>Java程序内存的分配是在JVM虚拟机内存分配机制下完成，保证了Java程序在各种平台下对内存的访问都能保证效果一致的机制及规范。Java数据区域分为五大数据区域。这些区域各有各的用途，创建及销毁时间。其中方法区和堆是所有线程共享的，栈，本地方法栈和程序虚拟机则为线程私有的。程序计数器是一块很小的内存空间，它是线程私有的，可以认作为当前线程的行号指示器。<br><img src="/2019/04/15/Java的垃圾回收机制/1.png" alt></li><li>Java利用多线程机制使得多个任务能够同时执行处理，所有的线程共享JVM内存区域，而且每个线程又单独的有自己的工作内存，当线程与内存区域进行交互时，数据从主存拷贝到工作内存，进而交由线程处理。<h1 id="分代的垃圾回收策略"><a href="#分代的垃圾回收策略" class="headerlink" title="分代的垃圾回收策略"></a>分代的垃圾回收策略</h1></li><li>新生代（Young Generation）。所有新生成的对象首先都是放在年轻代的。年轻代的目标就是尽可能快速的收集那些生命周期短的对象。新生代内存按照8:1:1的比例分为一个eden区和两个survivor(survivor0,survivor1)区。一个Eden区，两个 Survivor区(一般而言)。大部分对象在Eden区中生成。回收时先将eden区存活对象复制到一个survivor0区，然后清空eden区，当这个survivor0区也存放满了时，则将eden区和survivor0区存活对象复制到另一个survivor1区，然后清空eden和这个survivor0区，此时survivor0区是空的，然后将survivor0区和survivor1区交换，即保持survivor1区为空， 如此往复。NewSize和MaxNewSize分别可以控制新生代的初始大小和最大的大小。</li><li>老年代（Old Generation）。在年轻代中经历了N次垃圾回收后仍然存活的对象，就会被放到年老代中。因此，可以认为年老代中存放的都是一些生命周期较长的对象。内存比新生代也大很多(大概比例是1:2)，当老年代内存满时触发Major GC即Full GC，Full GC发生频率比较低，老年代对象存活时间比较长，存活率标记高。当survivor1区不足以存放 eden和survivor0的存活对象时，就将存活对象直接存放到老年代。若是老年代也满了就会触发一次Full GC，也就是新生代、老年代都进行回收。</li><li>持久代（Permanent Generation）。用于存放静态文件，如Java类、方法等。持久代对垃圾回收没有显著影响，但是有些应用可能动态生成或者调用一些class，例如Hibernate 等，在这种时候需要设置一个比较大的持久代空间来存放这些运行过程中新增的类。<br><img src="/2019/04/15/Java的垃圾回收机制/2.png" alt></li></ol>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>开启新的篇章</title>
      <link href="/2018/06/29/%E5%BC%80%E5%90%AF%E6%96%B0%E7%9A%84%E7%AF%87%E7%AB%A0/"/>
      <url>/2018/06/29/%E5%BC%80%E5%90%AF%E6%96%B0%E7%9A%84%E7%AF%87%E7%AB%A0/</url>
      
        <content type="html"><![CDATA[<p>以后要记录所有新学到的知识点<br>开启一段新的学习方法</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日记 </tag>
            
            <tag> 记叙 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>404</title>
      <link href="/404/index.html"/>
      <url>/404/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于我</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<p>QQ： 437012461<br>微信： yang437012461<br>学校： 电子科技大学</p>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>分类</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>search</title>
      <link href="/search/index.html"/>
      <url>/search/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>标签</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
